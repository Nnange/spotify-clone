{"version":3,"sources":["spotify.js","components/Login.js","DataLayer.js","components/Header.js","components/SongRow.js","components/Body.js","components/Footer.js","components/SidebarOption.js","components/Sidebar.js","components/Player.js","App.js","serviceWorker.js","reducer.js","index.js"],"names":["loginUrl","join","Login","className","src","alt","href","DataLayerContext","createContext","DataLayer","initialState","reducer","children","Provider","value","useReducer","useDataLayerValue","useContext","Header","user","placeholder","type","Avatar","images","url","display_name","SongRow","track","album","name","artists","map","artist","Body","spotify","discover_weekly","description","fontSize","tracks","items","item","Footer","Grid","container","spacing","xs","Slider","SidebarOption","title","Icon","Sidebar","playlists","HomeIcon","SearchIcon","LibraryMusicIcon","playlist","Player","SpotifyWebApi","App","token","dispatch","useEffect","hash","window","location","substring","split","reduce","initial","parts","decodeURIComponent","_token","access_token","setAccessToken","getMe","then","getUserPlaylists","getPlaylist","res","Boolean","hostname","match","state","action","console","log","ReactDOM","render","StrictMode","playing","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ca745c0d.chunk.js","sourcesContent":["\r\nexport const authEndpoint = \"https://accounts.spotify.com/authorize\";\r\n\r\n// const redirectUri = \"http://localhost:3000/\";\r\nconst redirectUri = \"https://nnange.github.io/spotify-clone\";\r\n\r\nconst clientId = \"756709098e964f248bc984e064603b17\";\r\n\r\nconst scopes = [\r\n    \"user-read-currently-playing\",\r\n    \"user-read-recently-played\",\r\n    \"user-read-playback-state\",\r\n    \"user-top-read\",\r\n    \"user-modify-playback-state\",\r\n];\r\n\r\nexport const getTokenFromUrl = () => {\r\n    return window.location.hash\r\n        .substring(1)\r\n        .split('&')\r\n        .reduce((initial, item) => {\r\n            let parts = item.split('=');\r\n            initial[parts[0]] = decodeURIComponent(parts[1])\r\n\r\n            return initial\r\n        }, {});\r\n}\r\n\r\nexport const loginUrl = `${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\"%20\")}&response_type=token&show_dialog=true`\r\n","import React from 'react'\r\nimport \"../CSS/Login.css\"\r\nimport { loginUrl } from '../spotify'\r\n\r\n\r\nconst Login = () => {\r\n    return (\r\n        <div className=\"login\">\r\n            <img src=\"https://getheavy.com/wp-content/uploads/2019/12/spotify2019-830x350.jpg\" alt=\"\"/>\r\n\r\n            <a href={loginUrl}>LOGIN WITH SPOTIFY</a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React,{ createContext, useContext, useReducer} from \"react\";\r\n\r\nexport const DataLayerContext = createContext();\r\n\r\nexport const DataLayer = ({initialState, reducer, children}) => (\r\n    <DataLayerContext.Provider value={useReducer(reducer, initialState)}>\r\n        {children}\r\n    </DataLayerContext.Provider>\r\n);\r\n\r\nexport const useDataLayerValue = () => useContext(DataLayerContext);","import React from 'react';\r\nimport \"../CSS/Header.css\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport { Avatar } from '@material-ui/core';\r\nimport { useDataLayerValue } from '../DataLayer';\r\n\r\nconst Header = () => {\r\n    const [{ user }, dispatch] = useDataLayerValue();\r\n\r\n\r\n    return (\r\n        <div className=\"header\">\r\n            <div className=\"header__left\">\r\n              <SearchIcon />\r\n              <input\r\n              placeholder=\"Search for Artists, Songs, or Podcasts\"\r\n              type=\"text\"\r\n                />  \r\n            </div>\r\n            <div className=\"header__right\">\r\n                <Avatar  src={user?.images[0]?.url} alt={user?.display_name} />\r\n                <h4>{user?.display_name}</h4>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport \"../CSS/SongRow.css\"\r\n\r\nconst SongRow = ({ track }) => {\r\n    return (\r\n        <div className=\"songRow\">\r\n            <img className=\"songRow__album\" src={track.album.images[0].url} alt= \"\"/>\r\n            <div className=\"songRow__info\">\r\n                <h1>{track.name}</h1>\r\n                <p>\r\n                    {track.artists.map((artist) => artist.name).join(\",\")}\r\n                    {track.album.name}\r\n                </p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SongRow\r\n","import React from 'react'\r\nimport \"../CSS/Body.css\"\r\nimport { useDataLayerValue } from '../DataLayer';\r\nimport Header from './Header'\r\nimport PlayCircleFilledIcon from '@material-ui/icons/PlayCircleFilled';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\r\nimport SongRow from './SongRow';\r\n\r\nconst Body = ({spotify}) => {\r\n    const [{ discover_weekly }, ] = useDataLayerValue();\r\n\r\n    \r\n    return (\r\n        <div className=\"body\">\r\n            <Header spotify={spotify} />\r\n\r\n            <div className=\"body__info\">\r\n                <img src={discover_weekly?.images[0]?.url} alt=\"\" />\r\n                <div className=\"body__infoText\">\r\n                    <strong>PLAYLIST</strong>\r\n                    <h2>Discover Weekly</h2>\r\n                    <p>{discover_weekly?.description}</p>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"body__songs\">\r\n                <div className=\"body__icons\">\r\n                    <PlayCircleFilledIcon className=\"body__shuffle\" />\r\n                    <FavoriteIcon fontSize=\"large\" />\r\n                    <MoreHorizIcon />\r\n                </div>\r\n\r\n                {discover_weekly?.tracks.items.map(item => (\r\n                    <SongRow track={item.track} />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Body\r\n ","import React from 'react'\r\nimport \"../CSS/Footer.css\"\r\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline';\r\nimport SkipNextIcon from '@material-ui/icons/SkipNext';\r\nimport SkipPreviousIcon from '@material-ui/icons/SkipPrevious';\r\nimport ShuffleIcon from '@material-ui/icons/Shuffle';\r\nimport RepeatIcon from '@material-ui/icons/Repeat';\r\nimport PlaylistPlayIcon from '@material-ui/icons/PlaylistPlay';\r\nimport VolumeDownIcon from '@material-ui/icons/VolumeDown';\r\nimport { Grid, Slider } from '@material-ui/core';\r\nimport { useDataLayerValue } from '../DataLayer';\r\n\r\nconst Footer = () => {\r\n    const [{user}, dispatch] = useDataLayerValue();\r\n\r\n    return (\r\n        <div className=\"footer\">\r\n            <div className=\"footer__left\">\r\n                <img \r\n                    className=\"footer__albumLogo\" \r\n                    src={user?.images[0]?.url} \r\n                    alt=\"\"\r\n                />\r\n                <div className=\"footer__songInfo\">\r\n                    <h4>Yeah</h4>\r\n                    <p>Usher</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"footer__center\">\r\n                <ShuffleIcon className=\"footer__green\" /> \r\n                <SkipPreviousIcon className=\"footer__icon\"/>\r\n                <PlayCircleOutlineIcon fontSize=\"Large\" className=\"footer__icon\" />\r\n                <SkipNextIcon className=\"footer__icon\" />\r\n                <RepeatIcon className=\"footer__green\"/>\r\n\r\n            </div>\r\n            <div className=\"footer__right\">\r\n                <Grid container spacing={2}>\r\n                    <Grid item>\r\n                        <PlaylistPlayIcon />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <VolumeDownIcon />\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        <Slider />\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","import React from 'react'\r\nimport \"../CSS/sidebarOption.css\"\r\n\r\nconst SidebarOption = ({title, Icon}) => {\r\n    return (\r\n        <div className=\"sidebarOption\">\r\n            {Icon && <Icon className=\"sidebarOption__icon\" />}\r\n           {Icon ? <h4>{title}</h4> : <p>{title}</p>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SidebarOption\r\n","import React from 'react'\r\nimport \"../CSS/Sidebar.css\"\r\nimport SidebarOption from './SidebarOption'\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport LibraryMusicIcon from '@material-ui/icons/LibraryMusic';\r\nimport { useDataLayerValue } from '../DataLayer';\r\n\r\nconst Sidebar = () => {\r\n\r\n    const [{ playlists}, ] = useDataLayerValue();\r\n\r\n    return (\r\n        <div className=\"sidebar\">\r\n            <img \r\n                className=\"sidebar__logo\"\r\n                src=\"https://getheavy.com/wp-content/uploads/2019/12/spotify2019-830x350.jpg\" \r\n                alt=\"\" \r\n            />\r\n            <SidebarOption Icon={HomeIcon} title=\"Home\"/>\r\n            <SidebarOption Icon={SearchIcon} title=\"Search\"/>\r\n            <SidebarOption Icon={LibraryMusicIcon} title=\"Your Library\"/>\r\n\r\n            <br />\r\n\r\n            <strong className=\"sidebar__title\">PLAYLISTS</strong>\r\n            <hr />\r\n            \r\n            {playlists?.items?.map(playlist => (\r\n                <SidebarOption title={playlist.name} />\r\n            ))}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar \r\n","import React from 'react'\r\nimport \"../CSS/Player.css\"\r\nimport Body from './Body'\r\nimport Footer from './Footer'\r\nimport Sidebar from './Sidebar'\r\n\r\nconst Player = ({spotify}) => {\r\n    return (\r\n        <div className=\"player\">\r\n            <div className=\"player__body\">\r\n                <Sidebar />\r\n                <Body spotify={spotify} />\r\n                <Footer  />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Player\r\n","import React, { useEffect, useState } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport './App.css';\nimport Login from './components/Login';\nimport Player from './components/Player';\nimport { useDataLayerValue } from './DataLayer';\nimport { getTokenFromUrl } from './spotify';\n\nconst spotify = new SpotifyWebApi();\n\nfunction App() {\n\n  const [{user, token}, dispatch] = useDataLayerValue();\n\n  // run code based on a given condition\n  useEffect(() => {\n    const hash = getTokenFromUrl();\n    window.location.hash = \"\";\n    const _token = hash.access_token;\n\n    if(_token) {\n      dispatch({\n        type: 'SET_TOKEN',\n        token: _token,\n      });\n\n      spotify.setAccessToken(_token);\n      spotify.getMe().then((user)=>{\n\n        dispatch({\n          type: 'SET_USER',\n          user: user,\n        });\n      });\n      \n      spotify.getUserPlaylists().then((playlists)=> {\n        dispatch({\n          type: \"SET_PLAYLISTS\",\n          playlists: playlists\n        });\n      });\n\n      spotify.getPlaylist('37i9dQZEVXcR7EjiuNSy3g').then(res =>\n          dispatch({\n            type: 'SET_DISCOVER_WEEKLY',\n            discover_weekly: res,\n          })\n        )\n    \n    } \n  }, [])\n\n  return (\n\n    <div className=\"app\">\n      {\n        token ? (\n        <Player spotify={spotify} />\n        ):(\n          <Login />\n        )\n      }\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const initialState = {\r\n    user:null,\r\n    playlist: [],\r\n    playing: false,\r\n    item: null,\r\n    //   token: \"BQBHrkRk8wUO90XbkyNG2m-6CVIJMB5dPnNhdHuw9fF0Mkz14B0GkhawT1w1VM_CO6m7xkhktQGmZEQMP03UMsVSYluqKFnXINTnpd2lx5YdxkJP3ckx8uVWkRjvmlytJrPLtjGN_Y2kd_99iPTxPGEZvVBkvwlr454ZVrkSMlrA_bwZepCP\",\r\n    playlists: null,\r\n}\r\n\r\n\r\n\r\nconst reducer = (state, action) => {\r\n    console.log(action);\r\n    \r\n    switch (action.type) {\r\n\r\n    case 'SET_USER':\r\n        return { \r\n            ...state, \r\n            user: action.user \r\n        }\r\n        case 'SET_TOKEN':\r\n            return { \r\n                ...state, \r\n                token: action.token \r\n            }\r\n        case 'SET_PLAYLISTS':\r\n            return { \r\n                ...state, \r\n                playlists: action.playlists \r\n            }\r\n\r\n        case 'SET_DISCOVER_WEEKLY':\r\n        return {\r\n            ...state,\r\n            discover_weekly: action.discover_weekly,\r\n        }\r\n\r\n    default:\r\n        return state\r\n    }\r\n}\r\n\r\nexport default reducer;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { DataLayer } from './DataLayer';\nimport reducer, { initialState } from './reducer';\n\nReactDOM.render(\n  <React.StrictMode>\n    <DataLayer initialState={initialState} reducer={reducer}>\n    <App />\n    </DataLayer>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}